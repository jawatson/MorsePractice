package org.minow.MorsePractice;import java.util.*;import java.awt.BorderLayout;import java.awt.Color;
import java.awt.Component;import java.awt.Cursor;import java.awt.AWTEvent;import java.awt.FlowLayout;import java.awt.event.*;import javax.swing.JButton;
import javax.swing.JComponent;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;/** * SetFrequencyDialog lets the user set the syntesizer frequency.<p> * * Copyright &copy; 1996-2000 Martin Minow. All Rights Reserved.<p> * * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.<p> * * Based, vaguely, on the YesNoDialog class in Java in a Nutshell, 2nd edition, * but that was a long time ago. * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.0 * This class is Java 1.1 compatible. * Set tabs every 8 characters. */class SetFrequencyDialog extends JDialog        implements ActionListener{
    public static final long serialVersionUID = 13040901L;
        private JButton      okButton        = new JButton(" OK ");    private JButton      cancelButton    = new JButton(" Cancel ");    private NumberField frequencyField  = new NumberField();    private boolean     success         = false;    public SetFrequencyDialog(Component parent, double initialValue) {        super(getFrame(parent),            "Set Synthesizer Frequency",            true);        setResizable(true);        setBackground(Color.white);     /* Force a common background color      */        setForeground(Color.black);     /* Force a common foreground color      */        okButton.addActionListener(this);        cancelButton.addActionListener(this);        frequencyField.setValue(initialValue);        JPanel buttonPanel = new JPanel();        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 8, 4));        buttonPanel.add(cancelButton);        buttonPanel.add(new JLabel("        "));        buttonPanel.add(okButton);        getContentPane().setLayout(new BorderLayout(4, 4));        getContentPane().add(new JLabel("  New Frequency (min 80, max 3000)  "), "North");        getContentPane().add(new JLabel("  "), "West");        getContentPane().add(new JLabel("  "), "East");        getContentPane().add(frequencyField, "Center");        getContentPane().add(buttonPanel, "South");        pack();        setVisible(true);        setCursor(Cursor.getDefaultCursor());    }    public boolean isSuccess()    {        return (success);    }    public double getSynthesizerFrequency()    {        double result   = frequencyField.getValue();        if (result < 80.0) {            result      = 80.0;        }        if (result >= 3000.0) {            result      = 3000.0;        }        return (result);    }    /**     * Implement the ActionListener interface.     */    public void actionPerformed(            ActionEvent         event        )    {        if (event.getSource() == okButton) {            success             = true;        }        else if (event.getSource() == cancelButton) {            success             = false;        }        else {            System.err.println("Strange button press: " + event.toString());        }        dispose();    }/*        public boolean processEvent(AWTEvent event) //jw handleEvent deprecated    {        boolean result = true;         // This handles the case where the user clicks         // on the close box instead of quitting the         //dialog by clicking on the OK or Cancel buttons.        if (event.getID() == Event.WINDOW_DESTROY) {            dispose();        }        else {            result = super.processEvent(event);        }        return (result);} */    /**     * This static method locates the Frame that encloses a     * specified component.     * @param component         The component that needs its frame.     * @return the component's frame or null if there is none.     */              public static JFrame getFrame(Component component) {        while (component != null && !(component instanceof JFrame)) {            component = component.getParent();        }        return ((JFrame) component);    }    }   