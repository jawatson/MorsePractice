package org.minow.MorsePractice;
import javax.swing.event.DocumentEvent;/** * EditTextAreaListener connects an EditTextArea to the Component * that manages the Edit menu. The EditTextArea calls enableEditMenu when * the Edit menu may need changing. It calls editTextValueChanged when * the user types, deletes, or otherwise modifies the underlying * TextArea.  * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This application is Java 1.1 compatible. */public interface EditTextAreaListener {    /*     * UNDO_REPLACE and REDO_REPLACE are provided for search/replace     * action support but are not suppored directly by the EditTextArea     * object.     */    public static final int             UNDO_UNDEFINED          = 0;    public static final int             UNDO_NOTHING            = 1;    public static final int             UNDO_TYPING             = 2;    public static final int             UNDO_DELETE             = 3;    public static final int             UNDO_CUT                = 4;    public static final int             UNDO_PASTE              = 5;    public static final int             UNDO_CLEAR              = 6;    public static final int             UNDO_REPLACE            = 7;    public static final int             REDO_NOTHING            = 8;    public static final int             REDO_TYPING             = 9;    public static final int             REDO_DELETE             = 10;    public static final int             REDO_CUT                = 11;    public static final int             REDO_PASTE              = 12;    public static final int             REDO_CLEAR              = 13;    public static final int             REDO_REPLACE            = 14;    public static final int             UNDO_ACTION_COUNT       =                                                (REDO_TYPING - UNDO_TYPING);        /**     * The strings in undoMenuLabels form the text shown in the     * Edit menu. These should be localized.     */    public static final String[] undoMenuLabels  = {        "Undo Bug",     /* Undefined                    */        "Undo",         /* Nothing happens here         */        "Undo Typing",        "Undo Delete",        "Undo Cut",        "Undo Paste",        "Undo Clear",        "Undo Replace", /* Not used in MorsePractice    */        "Redo",         /* Nothing happens here         */        "Redo Typing",        "Redo Delete",        "Redo Cut",        "Redo Paste",        "Redo Clear",        "Redo Replace"    };    /**     * Respond to a text event in an EditTextArea.     * @param activeTextArea            The currently-active text area or null if     *                                  a "focusLost" event occurred. If so,     *                                  hasSelection and hasClipboardContent will     *                                  be false to disable the Edit menu options.     * @param hasSelection              True if the current area has a non-null     *                                  selection.     * @param hasClipboardContent       True if the Clipboard holds a string.     * <BR>     * Usage overview:     * <BR>     * When enableEditMenu is called, record the activeTextArea in a private     *  variable. Enable and disable menus as follows:     *  <UL>     *  <LI>hasSelection:               Enable Cut, Copy, and Clear if true,     *                                  disable if false.     *  </LI>     *  <LI>hasClipboardContent         Enable Paste if true, disable if false.     *  </LI>     *  </UL>     * The component should also call EditTextArea.setUndoMenuItem     * to set the correct menu item.     * @see EditTextArea#setUndoMenuItem     */    public void enableEditMenu(            EditTextArea                activeTextArea,            boolean                     hasSelection,            boolean                     hasClipboardContent        );    /**     * Listen to TextListener events.     * @param event                     The current TextArea event.     */    public void editTextValueChanged(DocumentEvent event);}