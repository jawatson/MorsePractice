package org.minow.MorsePractice;import java.util.*;import java.net.*;import java.io.*;import java.lang.Comparable;/** * TrialPair holds the character sent, character received, and count.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This module is Java 1.1 compatible. */public class TrialPair implements Comparable<TrialPair> {    public char         sentChar;    public char         gotChar;    public int          count           = 1;        /**     * Create a trial datum.     * @param sentChar  The character sent to the listener     * @param gotChar   The character that the listener heard.     */    public TrialPair(            char                sentChar,            char                gotChar        )    {        this.sentChar           = Character.toUpperCase(sentChar);        this.gotChar            = Character.toUpperCase(gotChar);    }    /**     * Return the Hashtable key.     * @return a string that uniquely identifies this trial pair.     */    public String getKey()    {        StringBuffer result     = new StringBuffer();        result.append(sentChar);        result.append(gotChar);        return (result.toString());    }    /**     * Implement the Comparable interface to compare this TrialPair     * with another for sorting.     * @param other             The other TrialPair     * @return less than zero, zero, or greater than zero depending     *          on whether this TrialPair is less than, equal to,     *          or greater than the other TrialPair.     */    public int compareTo(TrialPair other)    {        char otherSentChar      = other.sentChar;        char otherGotChar       = other.gotChar;        int sent                = (sentChar - otherSentChar);        int got                 = (gotChar - otherGotChar);        return ((sent != 0) ? sent : got);    }    /**     * Write this pair to an output file.     * @param out       The file to write to.     */    public void write(            FileWriter          out        )    {        try {            out.write(toString());            out.write(',');        }        catch (IOException e) {            System.out.println("Exception writing file: " + e.toString());        }    }    /**     * Return a human-readable version of the TrialPair.     * @return the contents as a string.     */    public String toString()    {        return (String.valueOf(sentChar)                + String.valueOf(gotChar)                + " " + Integer.toString(count)            );    }};