package org.minow.MorsePractice;import java.util.TreeMap;import java.util.Vector;
/*
import java.net.*;import java.io.*;*/
/** * Trial holds the result of one Koch trial.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This module is Java 1.1 compatible. */public class Trial {    TreeMap<String, TrialPair> trialTreeMap    = new TreeMap<String, TrialPair>();    String trialText            = "";        /**     * This default constructor is used for the current trial.     * The trial is populated by adding trialPair elements.     */    public Trial()    {    }    /**     * Specify the trial text (for the new trial).     * @param trialText The text used for this trial     */    public void setTrialText(String trialText) {        this.trialText          = trialText;    }    /**     * Return the current trial text.     * @param the trial text.     */    public String getTrialText()    {        return (trialText);    }    /**     * Add a new trial to the database (with a count of one)     * @param sentChar  The character sent in this trial.     * @param gotChar   The character that the user heard.     */    public void addPair(char sentChar, char gotChar) {        addPair(new TrialPair(sentChar, gotChar));    }    /**     * Add a new trial to the database. The trial will be added if     * it hasn't been seen before.     */    public void addPair(TrialPair newPair) {        String key              = newPair.getKey();        /*         * Have we seen this one before?         */        TrialPair oldPair       = trialTreeMap.get(key);        if (oldPair != null) {            oldPair.count       += newPair.count;        }        else {            trialTreeMap.put(key, newPair);        }    }    /**     * Return the Trial vector as a string for debugging.     * @return the trial vector as a string.     */    public String toString()    {        TrialPair[] array       = getTrialPairs();        StringBuffer work       = new StringBuffer(trialText);        work.append(',');        for (int i = 0; i < array.length; i++) {            work.append(array[i].toString());            work.append(',');        }        return (work.toString());    }    /**     * Return the TrialPair HashTable as a sorted vector.     * @return a vector of TrialPair objects.     */    public TrialPair[] getTrialPairs() {        //Comparable[] sorted     = Sort.sort(trialHashtable);	Vector<TrialPair> sorted = new Vector<TrialPair>(trialTreeMap.values());   
	TrialPair[] result      = new TrialPair[sorted.size()];        for (int i = 0; i < sorted.size(); i++) {            result[i]           = sorted.elementAt(i);        }        return (result);    }};
