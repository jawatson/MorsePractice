package org.minow.MorsePractice;import java.awt.Dimension;import java.awt.Font;import java.awt.FontMetrics;import java.awt.Graphics;import java.awt.Image;import java.awt.image.*;import javax.swing.JComponent;import javax.swing.JLabel;/** * VerticalLabel is a label that draws vertically. I.e. it is lineHeight wide * and stringWidth high.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.0 * Set tabs every 4 characters. */ public class VerticalLabel extends JComponent{
    public static final long serialVersionUID = 13040901L;
        public static final int     CENTER          = JLabel.CENTER;    public static final int     LEFT            = JLabel.LEFT;    public static final int     RIGHT           = JLabel.RIGHT;    private String              text            = "";    private int                 alignment       = CENTER;    private Image               textImage       = null;    private int                 textWidth       = 0;    private int                 textHeight      = 0;        /**     * Create a component that draws its contents rotated     * 90 degrees.     */    public VerticalLabel()    {        this("", CENTER);    }    /**     * Create a label component that draws its contents rotated     * 90 degrees.     * @param text      The text to draw.     */    public VerticalLabel(            String              text        )    {        this(text, CENTER);    }    /**     * Create a label component that draws its contents rotated     * 90 degrees.     * @param text      The text to draw.     * @param alignment The text alignment (LEFT, CENTER, RIGHT).     */    public VerticalLabel(            String              text,            int                 alignment) {        super();        this.text               = text;        this.alignment          = alignment;    }    /**     * Return the label text.     * @return the current text.     */    public String getText() {        return (text);    }    /**     * Set the text to be displayed.     * @param text      The text to draw.     */    public void setText(String text) {        this.text               = text;        repaint();    }    /**     * Return the text alignment     * @return the current text alignment.     */    public int getAlignment()    {        return (alignment);    }    /**     * Set the text alignment     * @param alignment The text alignment (LEFT, CENTER, RIGHT).     */    public void setAlignment(            int                 alignment        )    {        this.alignment          = alignment;        repaint();    }    /**     * Return the component's preferred size. This is the size of the rotated text.     * @return the preferred component size.     */    public Dimension getPreferredSize()    {        FontMetrics fm          = getFontMetrics(getFont());        int width               = fm.getHeight();        int height              = fm.stringWidth(text);        // System.out.println("getPreferredSize. width = " + width + ", height = " + height);        return (new Dimension(width, height));    }    /**     * Return the component's minimum size. This is the size of the rotated text.     * @return the preferred component size.     */    public Dimension getMinimumSize()    {        return (getPreferredSize());    }    public void paint(            Graphics            g        )    {        /*         * First, draw the label (unrotated) into an offscreen image.         */        Dimension d             = getSize();        if (textImage == null         || textWidth != d.height         || textHeight != d.width) {            textWidth           = d.height;            textHeight          = d.width;            //textImage           = createImage(textWidth, textHeight);            textImage           = new BufferedImage(textWidth, textHeight, BufferedImage.TYPE_INT_ARGB);            // System.out.println("label width = " + textWidth + ", height = " + textHeight);        }        /*         * Transfer our graphics context to the offscreen image.         */        Graphics textGraphics   = textImage.getGraphics();        Font textFont           = getFont();        textGraphics.setFont(textFont);        //textGraphics.setColor(getBackground());        //textGraphics.fillRect(0, 0, textWidth, textHeight);        textGraphics.setColor(getForeground());        FontMetrics fm          = getFontMetrics(textFont);        int stringWidth         = fm.stringWidth(text);        int offset              = 0;    /* Assume left-alignment        */        switch (alignment) {        case LEFT:            break;        case RIGHT:            offset              = textWidth - stringWidth;            break;        case CENTER:        default:            offset              = (textWidth - stringWidth) / 2;            break;        }        textGraphics.drawString(text, offset, fm.getAscent());        /*         * Next, create a filter that rotates the label.         */        ImageProducer ip        = new FilteredImageSource(                                        textImage.getSource(),                                        new RotateImageFilter()                                    );        Image result            = getToolkit().createImage(ip);        g.drawImage(result, 0, 0, null);        textGraphics.dispose();    }}