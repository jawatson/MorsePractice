package org.minow.MorsePractice; import java.util.*;import java.io.*;import javax.swing.JFileChooser;import javax.swing.JFrame;/* * MorsePracticeFile contains several static methods that support * MorsePractice. This is a possibly fruitless attempt at removing * clutter from the main program. Note that these methods use * features that are specific to MacOS; however the methods should * work compatibly on all Java implementations. * * <p> * Copyright &copy; 1999  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This module is Java 1.1 compatible. */public class MorsePracticeFile implements FilenameFilter{    /**     * Ask the user for a text file and read its contents     * into a string. Return null on errors or dialog cancel.     * @param parent    A non-null parent to the dialog.     * @param prompt    A prompt string to display.     * @return The contents of the file.      */    public static String readTextFile(            JFrame               parent,            String              prompt        )    {        FileReader in           = null;        String result           = null;        try {            JFileChooser fd	= new JFileChooser();            //fd.setFileFilter(new MorsePracticeFile()); //todo            fd.showOpenDialog(parent); //todo set the prompt            /*JFileChooser fd       = new JFileChooser(                                        parent,                                        prompt,                                        JFileChooser.LOAD                                   );*/            //fd.show();            File inFile       = fd.getSelectedFile();            if (inFile != null) {                in              = new FileReader(inFile);                StringBuffer work = new StringBuffer();                int ch          = 0;                while ((ch = in.read()) >= 0) {                    work.append((char) ch);                }                result          = work.toString();            }        }        catch (IOException e) {}        finally {            try {                if (in != null) {                    in.close();                }            }            catch (IOException e) {}        }        return (result);    }    /**     * Create a file that will contain this text string. Errors are ignored.     * @param parent    The Frame that is needed to display the dialog.     * @param prompt    A string that tells the user what is being saved.     * @param text      The text to write to the file.     */    public static void saveTextFile(            JFrame               parent,            String              prompt,            String              text        )    {        FileWriter out          = null;        try {            JFileChooser fd	= new JFileChooser();            fd.showSaveDialog(parent);            /*JFileChooser fd       = new JFileChooser(                                        parent,                                        prompt,                                        JFileChooser.SAVE                                   );*/            //fd.show();            File outputFile 	= fd.getSelectedFile();            if (outputFile != null) {                //File outputFile = new File(fd.getDirectory(), fd.getFile());                out             = new FileWriter(outputFile);                MacFileUtilities.setCreatorAndFileType(outputFile, "R*ch", "TEXT");                out.write(text);                out.flush();                out.close();            }        }        catch (IOException e) {}        finally {            try {                if (out != null) {                    out.close();                }            }            catch (IOException e) {}        }    }    /**     * Create a binary file that the caller can use to write data.     * @param parent    The Frame that is needed to display the dialog.     * @param prompt    A string that tells the user what is being created.     * @return the output stream if successful; null if the user cancelled or     *          something went wrong.     */    public static DataOutputStream createBinaryFile(            JFrame               parent,            String              prompt        )    {        DataOutputStream out    = null;        try {            JFileChooser fd	= new JFileChooser();            fd.showSaveDialog(parent);            /*JFileChooser fd       = new JFileChooser(                                        parent,                                        prompt,                                        JFileChooser.SAVE                                   );*/            //fd.show();            File outputFile	= fd.getSelectedFile();            if (outputFile != null) {                //File outputFile = new File(fd.getDirectory(), fd.getFile());                FileOutputStream outStream = new FileOutputStream(outputFile);                out             = new DataOutputStream(outStream);                MacFileUtilities.setCreatorAndFileType(outputFile, "TVOD", "ULAW");            }        }        catch (IOException e) {}        return (out);    }        /**     * Implement the FilenameFilter interface.     * accept implements the FilenameFilter interface.     * @param directory         The File describing this directory.     * @param filename          The current file to test.     * @return true if this is a text file.     */    public boolean accept(            File                directory,            String              filename        )    {        boolean result          = true;        try {            result              = MacFileUtilities.isFileType(directory, filename, "TEXT");        }        catch (IOException e) {            result              = false;        }        catch (Exception e) {   /* ClassNotFoundException */            result              =                     (  filename.endsWith(".txt")                     || filename.endsWith(".text")                     );        }        return (result);    }}