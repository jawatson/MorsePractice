package org.minow.MorsePractice;import java.util.*;import java.net.*;import java.io.*;/** * TrialChar holds a single character from one trial.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This module is Java 1.1 compatible. */public class TrialChar implements Comparable<TrialChar>{    public char theChar;    /**     * Create a trial character. This is really only needed     * to pass the MorsePractice.Comparable interface to the     * Sort routine.     * @param sentChar  The character sent to the listener     * @param gotChar   The character that the listener heard.     */    public TrialChar(char theChar)    {        this.theChar            = theChar;            }    /**     * Implement the Comparable interface to compare this TrialPair     * with another for sorting.     * @param other             The other TrialPair     * @return less than zero, zero, or greater than zero depending     *          on whether this TrialPair is less than, equal to,     *          or greater than the other TrialPair.     */    public int compareTo(TrialChar other)    {        return (theChar - (other.theChar));     }    /**     * Return the value as a one-character string.     */    public String toString()    {        return ((new Character(theChar)).toString());    }};