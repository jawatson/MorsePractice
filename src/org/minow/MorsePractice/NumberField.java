package org.minow.MorsePractice;import java.awt.Color;import java.awt.Toolkit;import java.awt.event.*;import java.text.*;import javax.swing.event.DocumentListener;import javax.swing.JTextField;import javax.swing.text.AttributeSet;import javax.swing.text.BadLocationException;import javax.swing.text.Document;import javax.swing.text.PlainDocument;/** * <p> * NumberField provides a range-checked data entry area for * floating-point values. * </p> * <p> * Copyright &copy; 1996-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.0a0 * Set tabs every 8 characters. */ /*  * Modified to use swing components by J.Watson (31/1/03) */public class NumberField extends JTextField {
    public static final long serialVersionUID = 13040901L;
        private double              minimum         = 0.0;    private double              maximum         = 0.0;    private boolean             isIntegerOnly   = false;    private NumberFormat 	format;        /**     * Construct a NumberField that defaults to a 6-column     * double-precision value with no minimum or maximum.     */    public NumberField() {        this(6);    }    /**     * Construct a NumberField that defaults to a     * double-precision value with no minimum or maximum.     * @param columns           The number of columns to display.     */    public NumberField(int columns) {        this(columns, 0.0);    }    /**     * Construct a NumberField that defaults to a     * double-precision value with no minimum or maximum.     * @param columns           The number of columns to display.     * @param isIntegerOnly     true if all values must be integers.     */    public NumberField(int columns, boolean isIntegerOnly) {        this(columns, 0.0, 0.0, 0.0, isIntegerOnly);    }    /**     * Construct a NumberField that defaults to a     * double-precision value with no minimum or maximum.     * @param columns           The number of columns to display.     * @param initialValue      The initial value to display.     */    public NumberField(            int                 columns,            double              initialValue        )    {        this(columns, initialValue, 0.0, 0.0, false);    }    /**     * Construct a NumberField with full control over     * the field content and display.     * @param columns           The number of columns to display.     * @param initialValue      The initial value to display.     * @param minimum           The minimum valid value.     * @param maximum           The maximum valid value     * @param isIntegerOnly     true if all values must be integers.     */    public NumberField(            int                 columns,            double              initialValue,            double              minimum,            double              maximum,            boolean             isIntegerOnly        ) {        super(columns);        this.minimum            = minimum;        this.maximum            = maximum;        this.isIntegerOnly      = isIntegerOnly;                format = new DecimalFormat();        setDocument(new FormattedDocument(format));        setValue(initialValue);    }    /*    public String toString() {        return (lastGoodString);    }    */    public void setMinimum(double minimum) {        this.minimum            = minimum;        if (minimum < maximum && getValue() < minimum) {            setValue(minimum);        }    }        public double getMinimum() {        return (minimum);    }        public void setMaximum(double maximum){        this.maximum            = maximum;        if (minimum < maximum && getValue() > maximum) {            setValue(maximum);        }    }        public double getMaximum() {        return (maximum);    }    private double parseString(String text)        throws NumberFormatException {        double result           = 0.0;        if (isIntegerOnly) {            result      = (double) Integer.valueOf(text).intValue();        }        else {            result      = Double.valueOf(text).doubleValue();        }        return (result);    }        public double getValue() {        double retVal = 0.0;        try {            retVal = format.parse(getText()).doubleValue();        } catch (ParseException e) {            // This should never happen because insertString allows            // only properly formatted data to get in the field.            Toolkit.getDefaultToolkit().beep();            System.err.println("getValue: could not parse: " + getText());        }        return retVal;    }    public void setValue(double value) {        setText(format.format(value));        selectAll();    }}