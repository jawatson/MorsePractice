package org.minow.MorsePractice;import java.awt.BorderLayout;import java.awt.Container;import java.awt.Component;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagLayout;import java.awt.GridBagConstraints;import java.awt.Insets;import java.awt.Toolkit;import java.awt.event.*;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;/** * TrialDialog displays a modal dialog containing MorsePractice results.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.0 * 1996.07.24 * 1997.04.12 Make sure preferred size doesn't exceed screen size. * Set tabs every 8 characters. */class TrialDialog extends JDialog implements ActionListener, FocusListener {
    public static final long serialVersionUID = 13040901L;    private JButton okButton                    = new JButton(" OK ");    TrialData trialData                         = null;    private static final Font labelFont         = new Font("Serif", Font.BOLD, 12);    private static final Font textFont          = new Font("SansSerif", Font.PLAIN, 12);            /**     * Create the dialog that displays this trial results.     * @param enclosure         The component that holds this dialog.     * @param titleText         The dialog title.     * @param headingText       The dialog text.     * @param trial             This trial result.     * @param sentText         The text we sent.     * @param receivedText     The text we received.     */    public TrialDialog(            Component           enclosure,            String              titleText,            String              headingText,            Trial               trial,            String              sentText,            String              receivedText        ) {        super(getFrame(enclosure), titleText, true);        if (MorsePractice.DEBUG) {            System.out.println(headingText);        }        setResizable(true);        //setLayout(new BorderLayout(4, 4));        trialData               = new TrialData(trial);        okButton.setFont(new Font("Dialog", Font.PLAIN, 12));        okButton.addActionListener(this);        addFocusListener(this);        this.setFont(labelFont);        //setBackground(SystemColor.control);         /*         * Construct the pieces of the dialog. The extra panels         * enclosing the trialPanel and okButton prevent the         * internal contant from expanding to fill the space.         */
	JTable trialTable = new TrialTable(new TrialTableModel(trialData));
        JScrollPane trialScrollPane = new JScrollPane(trialTable);        /*         * Get the TrialScrollPanel heading labels.         */        JLabel headingLabel      = new JLabel(headingText, JLabel.CENTER);        JLabel sentLabel         = new JLabel("Sent", JLabel.CENTER);        VerticalLabel receivedLabel = new VerticalLabel("Received");        /*         * Put the pieces together         */        JPanel trialDisplay      = new JPanel();        trialDisplay.setLayout(new BorderLayout());        trialDisplay.add(trialScrollPane, 	BorderLayout.CENTER);        trialDisplay.add(sentLabel,     	BorderLayout.NORTH);        trialDisplay.add(receivedLabel, 	BorderLayout.WEST);        trialDisplay.add(headingLabel,  	BorderLayout.SOUTH);        /* */        /**         * Construct the panel that shows the sent characters with error         * markings and put it into a ScrollPane.         */        ResultPanel resultPanel = new ResultPanel(                                textFont,                                sentText,                                receivedText);        JScrollPane resultScrollPane = new JScrollPane(resultPanel, 
                                           JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
                                           JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);        /* */        // Panel bottomPanel       = new Panel();        // bottomPanel.add(okButton);        /* */        GridBagLayout gridbag   = new GridBagLayout();        GridBagConstraints c    = new GridBagConstraints();        getContentPane().setLayout(gridbag);        c.gridy                 = 0;        c.gridx                 = 0;        c.gridwidth             = 1;        c.gridheight            = 1;        c.weightx               = 1.0;        c.weighty               = 1.0;        c.fill                  = GridBagConstraints.BOTH;        c.anchor                = GridBagConstraints.CENTER;        c.insets                = new Insets(2, 2, 2, 2);        gridbag.setConstraints(trialDisplay, c);        getContentPane().add(trialDisplay);
                c.gridy                 = 1;        c.weighty               = 0.4;        //c.fill                  = GridBagConstraints.HORIZONTAL;        int receivedWidth        = receivedLabel.getPreferredSize().width;        c.insets                = new Insets(2, 2 + receivedWidth, 2, 2);        gridbag.setConstraints(resultScrollPane, c);        getContentPane().add(resultScrollPane);        c.gridy                 = 2;        c.weightx               = 0.0;        c.weighty               = 0.0;
        c.fill                  = GridBagConstraints.NONE;        c.insets                = new Insets(2, 2, 2, 2);        gridbag.setConstraints(okButton, c);        getContentPane().add(okButton);        /* */        pack();         /* Resize and construct the window  */        validate();        /*         * Set the dialog size. Make sure it doesn't get         * too large.         */        Dimension d             = getPreferredSize();        Insets insets           = getInsets();        d.width                 += (insets.left + insets.right);        d.height                += (insets.top + insets.bottom);        Dimension screenMax     = Toolkit.getDefaultToolkit().getScreenSize();        screenMax.width         = (screenMax.width * 3) / 4;        screenMax.height        = ((screenMax.height * 3) / 4) - 24; /* 24 == menu bar height */        if (false) {            System.out.println("Desired size: " + d.width + ", " + d.height);            System.out.println("  Screen Max: " + screenMax.width + ", " + screenMax.height);        }        d.width                 = Math.min(d.width, screenMax.width);        d.height                = Math.min(d.height, screenMax.height);        if (false) {            System.out.println("Actual size: " + d.width + ", " + d.height);        }        setSize(d.width, d.height);        /*if (false) {            System.out.println("Before setVisible");            showAllComponents(trialPanel, new Stack());        }*/        setVisible(true);    }            public void actionPerformed(ActionEvent event) {        if (event.getSource() == okButton) {            setVisible(false);            dispose();        }    }            public void focusGained(FocusEvent event) {        okButton.requestFocus();    }            public void focusLost(FocusEvent event) {        okButton.transferFocus();    }            public Insets getInsets()    {        Insets insets           = (Insets) super.getInsets().clone();        insets.top              += 4;        insets.left             += 4;        insets.right            += 4;        insets.bottom           += 4;        return (insets);    }         public static JFrame getFrame(Component component) {        while (component != null && !(component instanceof JFrame)) {            component = component.getParent();        }        return ((JFrame) component);    }        /*     * In order to fix layout problems, this debug method     * dumps the entire component hierarchy.     */     /*    private void showAllComponents(            JComponent           comp,            Stack               known        )    {        for (int i = 0; i < known.size(); i++) {            System.out.print("  ");        }        System.out.print( comp.getBounds());        if (comp instanceof Container) {            known.push(comp);            Container cont      = (Container) comp;            int nComponents     = cont.getComponentCount();            System.out.println(", inset: " + cont.getInsets() + ", has " + nComponents);            for (int i = 0; i < nComponents; i++) {                JComponent child = cont.getComponent(i);                if (known.contains(child)) {                    System.out.println("*** Recursing ***");                }                else {                    showAllComponents(child, known);                }            }            known.pop();        }        else {            System.out.println();        }    }*/}
