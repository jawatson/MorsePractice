package org.minow.MorsePractice;import java.awt.image.*;/** * RotateImageFilter rotates an image by 90 degrees. It may be used * to label the vertical axis of a graph.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author &lt;a href="mailto:minow@pobox.com"*gt;Martin Minow&lt;/a&gt; * @version 1.0 * Set tabs every 4 characters. */public class RotateImageFilter extends ImageFilter{    /*     * The dimensions of the rotated image.     */    private int         width;    private int         height;            /*     * We may be called for either a byte or int source.     * Generate the result image in the appropriate vector.     */    private int         intPixels[];    private byte        bytePixels[];            /*     * Save the original image color model.     */    private ColorModel  colorModel;    /**     * Create a new RotateImageFilter     */    public RotateImageFilter()    {        super();    }    /**     * Remember the image dimensions and pass them (rotated)     * to the image consumer.     * @param originalWidth     The original image width     * @param originalHeight    The original image height     */    public void setDimensions(            int                 originalWidth,            int                 originalHeight        )    {        this.width              = originalHeight;        this.height             = originalWidth;        consumer.setDimensions(width, height);     }    /**     * Filter the original image (passed as a byte vector)..     * @param x                 Left column in original image of this rectangle     * @param y                 Top row in original image of this rectangle     * @param sourceWidth       This rectangle width     * @param sourceHeight      This rectangle height     * @param colorModel        Original Image ColorModel       * @param pixels            This part of the image     * @param offset            The start of the original image subset      * @param scanSize          The actual width of the image.     */   public void setPixels(            int                 x,            int                 y,            int                 sourceWidth,            int                 sourceHeight,            ColorModel          colorModel,            byte                pixels[],            int                 offset,            int                 scanSize        )    {        // System.out.println("setPixels (byte) for " + sourceWidth + ", " + sourceHeight);        if (bytePixels == null) {            this.colorModel     = colorModel;            bytePixels          = new byte[width * height];        }        for (int row = 0; row < sourceHeight; row++) {            for (int col = 0; col < sourceWidth; col++) {                bytePixels[dst(col + x, row + y)] = pixels[offset];                ++offset;            }        }    }    /**     * Filter the original image (passed as an int vector)..     * @param x                 Left column in original image of this rectangle     * @param y                 Top row in original image of this rectangle     * @param sourceWidth       This rectangle width     * @param sourceHeight      This rectangle height     * @param colorModel        Original Image ColorModel       * @param pixels            This part of the image     * @param offset            The start of the original image subset      * @param scanSize          The actual width of the image.     */    public void setPixels(            int                 x,            int                 y,            int                 sourceWidth,            int                 sourceHeight,            ColorModel          colorModel,            int                 pixels[],            int                 offset,            int                 scanSize        )    {        // System.out.println("setPixels (int) for " + sourceWidth + ", " + sourceHeight);        if (intPixels == null) {            this.colorModel     = colorModel;            intPixels           = new int[width * height];        }        for (int row = 0; row < sourceHeight; row++) {            for (int col = 0; col < sourceWidth; col++) {                intPixels[dst(col + x, row + y)] = pixels[offset];                ++offset;            }        }    }        /**     * Return the destination pixel for a give source pixel.     * @param x         The source pixel's column coordinate.     * @param y         The source pixel's row coordinate.     * @return the designated pixel     */    private int dst(            int                 x,            int                 y        )    {        return ((height - 1 - x) * width + y);    }    /**     * When the image is complete, pass the rotated image to the     * consumer.     * @param status            Original image status     */    public void imageComplete(            int                 status        )    {        if ((status & (ImageConsumer.IMAGEABORTED | ImageConsumer.IMAGEERROR)) != 0) {            bytePixels          = null;            intPixels           = null;        }        else {            if (bytePixels != null) {                consumer.setPixels(0, 0, width, height, colorModel, bytePixels, 0, width);            }            else if (intPixels != null) {                consumer.setPixels(0, 0, width, height, colorModel, intPixels, 0, width);            }            else {                /*                 * I see no Image here.                 */                status          |= ImageConsumer.IMAGEABORTED;            }        }        consumer.imageComplete(status);    }}