package org.minow.MorsePractice;import java.beans.*;import java.util.*;import java.awt.Color;import java.awt.Cursor;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.*;import java.text.*;import javax.swing.JCheckBox;import javax.swing.JLabel;import javax.swing.JPanel;/** * KochTextField displays the Morse Code character set in Koch training * order. It provides methods to hilite selected characters. It also * monitors mouse clicks to allow the user to set a (discontiguous) * training set.<p> * * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.0 * Set tabs every 8 characters. * */public class KochTextField extends JPanel                implements MouseListener,                        ItemListener            /* Checkbox listener            */{
    public static final long serialVersionUID = 13040901L;    private MorsePractice owner         = null;    private Hashtable<String, JLabel> labels            = new Hashtable<String, JLabel>(MorsePractice.kochChars.length);    private Color normalTextColor       = Color.blue;    private Color selectedTextColor     = Color.yellow;        /**     * Create a KochTextField for this MorsePractice object.     * @param owner     The MorsePractice object.     */    public KochTextField(MorsePractice owner) {        super();        this.owner              = owner;        Font font               = new Font("Monospaced", Font.BOLD, 12);        setLayout(new GridLayout(1, MorsePractice.kochChars.length));        for (int i = 0; i < MorsePractice.kochChars.length; i++) {            String text         = new String(MorsePractice.kochChars, i, 1);            JLabel label         = new JLabel(text);            label.setFont(font);            label.addMouseListener(this);            char letter         = text.charAt(0);            setKochLabelState(label, owner.getMorseButtonState(letter));            JCheckBox button     = owner.getMorseButton(letter);            button.addItemListener(this);            labels.put(button.getName(), label);            add(label);        }    }        /*     * Implement the MouseListener interface. When the user     * clicks on a character in the KochTextField, the corresponding     * button is enabled or disabled.     * @param event     The MouseEvent.     */    public void mouseClicked(            MouseEvent          event        )    {        /* Get the label that the mouse is over */        JLabel label             = (JLabel) event.getComponent();        char letter             = label.getText().charAt(0);        boolean newState        = !owner.getMorseButtonState(letter);        owner.setMorseButtonState(letter, newState, true);        setKochLabelState(label, newState);    }    /*     * Implement the MouseListener interface.     * @param event     The MouseEvent.     */    public void mouseEntered(            MouseEvent          event        )    {        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));    }    /*     * Implement the MouseListener interface.     * @param event     The MouseEvent.     */    public void mouseExited(            MouseEvent          event        )    {        setCursor(Cursor.getDefaultCursor());    }    /*     * Implement the MouseListener interface.     * @param event     The MouseEvent.     */    public void mousePressed(            MouseEvent          event        )    {    }    /*     * Implement the MouseListener interface.     * @param event     The MouseEvent.     */    public void mouseReleased(            MouseEvent          event        )    {    }    /**     * Implement the ItemListener Interface.     * The user clicked on a Morse Code symbol checkbox.     * If the user is selecting this button, make its sound     * and add it to the random symbol training set.     * @param event     The button that the user clicked.     */    public void itemStateChanged(            ItemEvent           event        )    {        try {            JCheckBox button     = (JCheckBox) event.getItemSelectable();            setKochLabelState(button);        }        catch (Exception e) {            e.printStackTrace();        }    }        /**     * Set the hilite state of this label.     * @param button            The checkbox that controls this symbol     */    public void setKochLabelState(JCheckBox button) {        String labelName        = button.getName();        JLabel label             = labels.get(labelName);        boolean selected        = button.isSelected();        setKochLabelState(label, selected);    }    /**     * Called when the user clicks on one of the Koch characters.     * @param label             The label that the user clicked on     */    private void setKochLabelState(JLabel label, boolean selected) {        // System.out.println("setKochLabelState(" + label.getText() + ") = " + selected);        if (selected) {            label.setForeground(selectedTextColor);            label.setBackground(normalTextColor);        }        else {            label.setForeground(normalTextColor);            label.setBackground(getBackground());        }        label.repaint();    }       }
