package org.minow.applets;import java.util.*;import java.awt.Color;import java.awt.Font;import java.awt.MenuShortcut;import java.awt.Image;import java.awt.Toolkit;import java.awt.event.*;import java.applet.*;import java.net.*;import java.io.*;import javax.swing.JApplet;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;/** * AppletFramework is a wrapper that lets Applets run as applications. * It does not support the AudioPlayer methods.<p> * * Copyright &copy; 1999-2000 Martin Minow. All Rights Reserved.<p> * * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.<p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.1 * This applet is Java 1.1 compatible. *//* * AudioClip is not guaranteed to work on all browsers. */import sun.audio.*;public class AppletFramework extends JFrame {    public static final long serialVersionUID = 13040901L;    private JLabel statusLabel			        = null;    private Applet applet		    	        = null;    private Hashtable<String,String> params		= new Hashtable<String,String>();        private FrameworkContext appletContext	        = null;    private FrameworkStub appletStub		        = null;    /**     * AppletFramework provides a framework for the applet. To use it,     * add a stub main method to your applet that creates an AppletFramework     * with your applet as an argument. For example (where <code>args</code>     * is the command line String vector passed from the Java environment),     * <blockindent>     *  <div><code>org.minow.applets.AppletFramework frame =    </code></div>     *  <div><code>&nbsp;&nbsp;new org.applets.minow.AppletFramework( </code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;new MyApplet(),      </code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;"MyApplet Title",    </code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;240, 120,            </code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;args                 </code></div>     *  <div><code>&nbsp;&nbsp;);                               </code></div>     * </blockindent>     * @param applet    The applet class to run     * @param title     The title for the applet window     * @param width     The width of the applet panel in pixels.     * @param height    The height of the applet panel in pixels     * @param args	Command line args (may be null)     */    public AppletFramework(	    JApplet		applet,	    String		title,	    int			width,	    int			height,	    String[]		args	)    {	this(applet, title, width, height, args, true, null);    }    /**     * AppletFramework provides a framework for the applet. To use it,     * add a stub main method to your applet that creates an AppletFramework     * with your applet as an argument. For example (where <code>args</code>     * is the command line String vector passed from the Java environment),     * <blockindent>     *  <div><code>org.minow.applets.AppletFramework frame =	 	</code></div>     *  <div><code>&nbsp;&nbsp;new org.applets.minow.AppletFramework(	</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;new MyApplet(),		</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;"MyApplet Title",		</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;240, 120,			</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;args 			</code></div>     *  <div><code>&nbsp;&nbsp;);					</code></div>     * </blockindent>     * @param applet		The applet class to run     * @param title		The title for the applet window     * @param width		The width of the applet panel in pixels.     * @param height		The height of the applet panel in pixels     * @param args		Command line args (may be null)     * @param needStatus    true to display a status line     */    public AppletFramework(	    JApplet		applet,	    String		title,	    int			width,	    int			height,	    String[]		args,	    boolean             needStatus	)    {	this(applet, title, width, height, args, needStatus, null);    }        /**     * AppletFramework provides a framework for the applet. To use it,     * add a stub main method to your applet that creates an AppletFramework     * with your applet as an argument. For example (where <code>args</code>     * is the command line String vector passed from the Java environment),     * <blockindent>     *  <div><code>org.minow.applets.AppletFramework frame =	 	</code></div>     *  <div><code>&nbsp;&nbsp;new org.applets.minow.AppletFramework(	</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;new MyApplet(),		</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;"MyApplet Title",		</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;240, 120,			</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;args,			</code></div>     *  <div><code>&nbsp;&nbsp;&nbsp;&nbsp;appletArgs 			</code></div>     *  <div><code>&nbsp;&nbsp;);					</code></div>     * </blockindent>     * @param applet            The applet class to run     * @param title		The title for the applet window     * @param width		The width of the applet panel in pixels.     * @param height		The height of the applet panel in pixels     * @param args		Command line args (may be null)     * @param appletArgs	Additional arguments provided by the Applet main.     * @param needStatus        true to display a status line     * Arguments from the command line override the applet args.     */    public AppletFramework(	    JApplet		applet,	    String		title,	    int			width,	    int			height,	    String[]		args,	    boolean             needStatus,	    String[]		appletArgs) {	        super(title);	try {	    this.applet		= applet;	    configureHashtable(appletArgs);	    configureHashtable(args);	    if (needStatus) {	        statusLabel     = new JLabel("");            Font statusLabelFont = new Font("SansSerif", Font.PLAIN, 9);    	    statusLabel.setFont(statusLabelFont);    	    statusLabel.setBackground(Color.white);    	    statusLabel.setForeground(Color.black);	    }	    appletContext	= new FrameworkContext(applet, statusLabel);	    appletStub		= new FrameworkStub(params, appletContext, this);	    applet.setStub(appletStub);	    this.getContentPane().add("Center", applet);	    if (statusLabel != null) {	    this.getContentPane().add("South", statusLabel);	    }	    /*	     * Make sure there is a Quit menu option and catch the window	     * close event. Either event will quit the application.	     */	     /*	     This menu interferes with the menu added to the applet 	     so has been deleted. jw	     	    JMenuBar menuBar	= new JMenuBar();	    JMenu fileMenu	= new JMenu("File", true);	    JMenuItem quitItem	= new JMenuItem(                "Quit", KeyEvent.VK_Q);	    menuBar.add(fileMenu);	    fileMenu.add(quitItem);	    setJMenuBar(menuBar);	    quitItem.addActionListener(new ActionListener() {		public void actionPerformed(ActionEvent event) {                    java.lang.Runtime.getRuntime().exit(0);                } 	    });	    */	    addWindowListener(new WindowAdapter() {		public void windowClosing(WindowEvent event) {                    java.lang.Runtime.getRuntime().exit(0);		}	    });	    try {                applet.init();	    }	    catch (Exception e) {		System.err.println("Applet init failed");		// e.printStackTrace();		throw e;	    }	    /*	     * What ho, here we go.	     */	    pack();	    int labelHeight	= (statusLabel == null)	        ? 0 : statusLabel.getSize().height;	    setSize(width, height + labelHeight);	    applet.setSize(width, height);	    try {		applet.start();		setVisible(true);		repaint();	    }	    catch (NullPointerException e) {}	    catch (Exception e) {		System.out.println("Applet start failed: " + e);		// e.printStackTrace();	    }	}	catch (Exception e) {	    System.out.println("AppletFrame failed: " + e);	    e.printStackTrace();	}    }        /**     * Store the parameters into the provided Hashtable. Parameters are in     * strings of the form "foo=bar", where "=bar" may be missing. The parameter     * name, "foo" will always be coerced to lowercase. The parameter value, "bar"     * will be left intact. If a parameter arrives with the same name of a     * previously stored parameter, it will replace that parameter.     * @param paramStrings	The parameters to store. May be null.     */    private void configureHashtable(    	    String[]		paramStrings    	)    {    	if (paramStrings != null) {	    for (int i = 0; i < paramStrings.length; i++) {		int equals = paramStrings[i].indexOf('=');		if (equals < 0) {	/* No param value	*/		    params.put(paramStrings[i].toLowerCase(), null);		}		else {		    String name = paramStrings[i].substring(0, equals);		    String value = paramStrings[i].substring(equals+1);		    params.put(name.toLowerCase(), value);		}	    }	}    }/* FrameworkContext and FrameworkStub are inner classes *//* * Implement the AppletContext interface. */class FrameworkContext implements AppletContext {    private Toolkit		appletToolkit;    private Vector<Applet>	appletVector;    private JLabel		statusLabel;    /* May be null  */    public FrameworkContext(	    Applet		applet,	    JLabel		statusLabel	)    {	this.statusLabel	= statusLabel;	appletToolkit		= applet.getToolkit();	appletVector		= new Vector<Applet>(1);	appletVector.addElement(applet);    }    // jw the following three methods are not implemented but    // required by Java 1.4.1    public void setStream(java.lang.String str, java.io.InputStream ios) {            }    public java.io.InputStream getStream(java.lang.String str) {        return null;    }    public Iterator<String> getStreamKeys() {        return null;    }    // --    public Image getImage(URL url) {	return appletToolkit.getImage(url);    }        public AudioClip getAudioClip(URL	url) {	return (new AppletFrameworkAudioClip(url));    }        public Applet getApplet(String name) {	for (Enumeration<Applet> e = getApplets(); e.hasMoreElements();) {	    Applet thisApplet	= e.nextElement();	    if (name.equals(thisApplet.getName())) {		return (thisApplet);	    }	}    	return (null);    }    public Enumeration<java.applet.Applet> getApplets() {    	return appletVector.elements();    }        public void showDocument(URL url) {}    public void showDocument(URL url, String target) {}    public void showStatus(String statusString) {        if (statusLabel != null) {            statusLabel.setText(statusString);    }}}class AppletFrameworkAudioClip implements AudioClip {        public AppletFrameworkAudioClip(URL	url) {        System.out.println("AudioClip not supported");    }        public void play() {}        public void stop() {}        public void loop() {}} /*  * Implement the AppletStub interface  */class FrameworkStub implements AppletStub{    private URL			codeBase	= null;    private URL			documentBase	= null;    private Hashtable<String, String>	params;    private AppletContext	appletContext;    private JFrame		appletFrame;        FrameworkStub(    	    Hashtable<String, String>	params,    	    AppletContext	appletContext,    	    JFrame		appletFrame ){                	this.params		= params;    	this.appletContext	= appletContext;    	this.appletFrame	= appletFrame;    }    public boolean isActive() {	return (true);    }    public URL getDocumentBase() { 	if (documentBase == null) {	    try {		File file = new File("");		documentBase = new URL("file", "", file.getAbsolutePath().toString());	    }	    catch (java.net.MalformedURLException e) {}	}	return (documentBase);    }    public java.net.URL getCodeBase()    { 	if (codeBase == null) {	    try {		File file = new File("");		codeBase = new URL("file", "", file.getAbsolutePath().toString());	    }	    catch (java.net.MalformedURLException e) {}	}	return (codeBase);    }        public String getParameter(	    String		string	)    { 	return (params.get(string.toLowerCase()));    }    public AppletContext getAppletContext()    { 	return (appletContext);     }        public void appletResize(int width, int height) {	appletFrame.setSize(width, height);    }}}