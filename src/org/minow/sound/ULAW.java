package org.minow.sound;import java.util.*;import java.net.*;import java.io.*;/** * ULAW converts from linear to uLaw data format and provides * support for writing a uLaw (Sun .au) format file. * <p> * Based on SynthAudioClip, Copyright &copy; 1996 by Jef Poskanzer, * <jef@acme.com>. Please see * <http://www.acme.com/resources/classes/Acme/SynthAudioClip.java> * for original source and disclaimers. * </p> * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.2 * This module is Java 1.1 compatible. */public class ULAW{            /**     * Write the header of a .au (binary) file. Note: this method     * only writes 8-bit uLaw monaural data.     * @param out           The output stream.     * @param dataSize      The number of bytes of data     * @param sampleRate    The sample rate (samples per second)     * @throws IOException     */    public static void writeAudioHeader(            DataOutputStream    out,            int                 dataSize,            int                 sampleRate        )        throws IOException    {        /*         * The audio data has a header with the following format,         *      byte    type    name            note          *      0x00    int     magic           0x2E736E64 '.snd' in ASCII          *      0x04    int     dataLocation    offset or pointer to the data          *      0x08    int     dataSize        number of bytes of data          *      0x0C    int     dataFormat      format code: 1 for 8-bit u-law          *      0x10    int     samplingRate    the sampling rate          *      0x14    int     channelCount    the number of channels          *      0x18    char    info[4]         optional text information         *      0x19..  byte    Audio in muLaw format.         * Where "int" are 32-bit integers written in little-endian format         */        out.writeInt(0x2E736E64);        out.writeInt(0x19);        out.writeInt(dataSize);        out.writeInt(1);        out.writeInt(sampleRate);        out.writeInt(1);        for (int i = 0; i < 4; i++) {            out.writeByte(' ');        }    }    /*     * Linear to uLaw conversion, from     * <http://www.acme.com/resources/classes/Acme/SynthAudioClip.java>     */    private static final int[] exponentTable = {        0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,         4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,         5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,         5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,         7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7    };    private static final int CLIP   = 32635;    private static final int BIAS   = 0x84;    /**     * Convert a linear sample to Sun's uLaw format..     * @param   linear          The frequency in Hertz.     * @return  Returns the audio byte value.     */    public static byte linearToULaw(            int             linear        )    {        /*         * Convert the sample to sign absolute magnitude         */        int sign            = 0;        if (linear < 0) {            sign            = 0x80;            linear          = (-linear);        }        /*         * Clip the sample to the maximum value.         */         if (linear > CLIP) {            linear          = CLIP;        }        /*         * Convert from 16-bit linear to 8-bit uLaw.         */        linear              = linear + BIAS;        int exponent        = exponentTable[(linear >> 7) & 0xFF];        int mantissa        = (linear >> (exponent + 3)) & 0x0F;        byte result         = (byte) (~(sign | (exponent << 4) | mantissa));        return (result);    }}