package org.minow.sound;import java.util.*;import java.net.*;import java.io.*;/** * Sound provides a common public interface that will work with * the sun.audio and javax.sound classes (at least as far as * we need for MorsePractice). * </p> * <p> * Copyright &copy; 1999-2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.2 * This module is Java 1.1 compatible. */public interface Sound{    public static final double TWO_PI                           = 2.0 * Math.PI;    public static final double DEFAULT_AMPLITUDE                = 0.75;    public static final double DEFAULT_SYNTHESIZER_FREQUENCY    = 600.0;    public static final int RAMP_DURATION_MILLIS                = 5;        /**     * Sound.Listener signals an interested object     * when synthesis starts and stops. It can be used to enable     * and disable a "stop now" button.     */    public interface Listener     {        /**         * Signal SoundSyntesis state. The listener will be called when the         * SoundSynthesizer starts and stops generating sound.         * The class implementing this method will generally use this         * to enable and disable a "stop speaking" button.         * @param active                The synthesizer is active if true.         */        public void soundSynthesis(                boolean         active            );    }        /*     * Accessors for the Sound.Listener interface.     */        /**     * Add a Sound.Listener that will be notified when we start     * or stop the music.     * @param listener an Object that implements Sound.Listener      */    public void addListener(            Sound.Listener      listener        );            /**     * Remove a Sound.Listener     * @param listener an Object that implements Sound.Listener      */    public void removeListener(            Sound.Listener      listener        );    /*     * Accessors for the sound synthesize frequency.     */        /**     * Return the current synthesizer frequency.     * @return the current synthesizer frequency.     */    public double getSynthesizerFrequency();     /**     * Set the synthesizer frequency.     * @param synthesizerFrequency  The new synthesizer frequency.     */    public void setSynthesizerFrequency(            double          synthesizerFrequency        );        /*     * These methods generate sounds (and silence).     */                /**     * Append a one-second "tick" to the current synthesis.     */    public void tick();        /**     * Append a silent sequence to the current synthesis.     * @param durationMillis    The duration in milliseconds.     */    public void silence(            int             durationMillis        );    /**     * Append a tone at the default amplitude to the current     * synthesis. Note that the tone will ramp up and down to     * avoid clicks.     * @param durationMillis    The duration in milliseconds.     */    public void tone(            int             durationMillis        );        /**     * Append a single sample to the current synthesis.     * This is normally called by the tone() and silence()     * methods.     * @param sample    The amplitude of the value to synthesize.     *                  This should be a value between -1.0 and 1.0     */    public void synthesize(            float           sample        );    /**     * Append a vector of samples to the current synthesis.     * This is normally called by the tone() and silence()     * methods.     * @param samples   Each element of the samples vector contains     *                  am amplitude of the value to synthesize.     *                  This should be a value between -1.0 and 1.0     */    public void synthesize(            float[]     sample        );    /**     * Append a vector of samples to the current synthesis.     * This is normally called by the tone() and silence()     * methods.     * @param samples   Each element of the samples vector contains     *                  am amplitude of the value to synthesize.     *                  This should be a value between -1.0 and 1.0     * @param offset    The starting point in the samples vector     * @param length    The number of samples to synthesize     */    public void synthesize(            float[]     sample,            int         offset,            int         length        );    /**     * Return the estimated duration of the current sequence     * in milliseconds     * @return the duration in milliseconds     */    public long getDuration();    /**     * Reset the synthesizer for a new sequence. This also     * stops synthesis if active.     */    public void resetSynthesizer();    /*     * Stop any current synthesis and get ready to start a new     * sound. This will signal listeners that synthesis is now active.     */    public void startSynthesizer();    /**     * Stop any current synthesis. This will signal listeners that     * synthesis is no longer active.     */    public void stopSynthesizer();    /**      * Inform the caller whether the synthesis is active.     * @return true if the synthesizer is making a sound.     */    public boolean isSynthesizerActive();      /**     * Write the current synthesis to an audio file. The file     * will always be written in Sun .au (ULAW) format. Clients     * can use the Sound.ULAW methods to write the header and     * convert data from linear to ULAW format.     */    public void writeAudio(            DataOutputStream    out        )        throws IOException;}