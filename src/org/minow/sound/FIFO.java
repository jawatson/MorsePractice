package org.minow.sound;import java.util.*;/** * FIFO implements a simple (?) blocking fifo. Based on the * FIFO class in Concurrent Programming in Java, 2nd Edition... * </p> * <p> * Copyright &copy; 2000  *      <a href="mailto:minow@pobox.com">Martin Minow</a>. *      All Rights Reserved. * </p> * <p> * <small> * Permission to use, copy, modify, and redistribute this software and its * documentation for personal, non-commercial use is hereby granted provided that * this copyright notice and appropriate documentation appears in all copies. This * software may not be distributed for fee or as part of commercial, "shareware," * and/or not-for-profit endevors including, but not limited to, CD-ROM collections, * online databases, and subscription services without specific license.  The * author makes no expressed or implied warranty of any kind and assumes no * responsibility for errors or omissions. No liability is assumed for any incidental * or consequental damages in connection with or arising out of the use of the * information or program. * </small> * </p> * * @author <a href="mailto:minow@pobox.com">Martin Minow</a> * @version 1.2 * This module is Java 1.1 compatible. */public class FIFO{    protected final byte[][] data;     /* The data */    protected int putIndex      = 0;    protected int getIndex      = 0;    protected int usedSlots     = 0;        public FIFO()    {        this(2);    }    public FIFO(            int         capacity        )    {        if (capacity <= 0) {            throw new IllegalArgumentException("capacity");        }        data            = new byte[capacity][];    }    /**     * Store a byte vector in the FIFO, block if the FIFO is full.     * @param datum     The data to store.     */    public synchronized void put(            byte[]      datum        )        throws InterruptedException    {        while (usedSlots >= data.length) {System.out.println("put waits");            wait();        }        data[putIndex]  = datum;        putIndex        = (putIndex + 1) % data.length;        if (usedSlots++ == 0) {System.out.println("put notifies");            notifyAll();        }    }    /**     * Retrieve a byte vector from the FIFO, block if the FIFO is empty.     * @result the next byte vector to process..     */    public synchronized byte[] get()        throws InterruptedException    {        while (usedSlots <= 0) {System.out.println("get waits");            wait();        }        byte[] result   = data[getIndex];        getIndex        = (getIndex + 1) % data.length;        if (usedSlots-- >= data.length) {System.out.println("get notifies");            notifyAll();        }        return (result);    }        }